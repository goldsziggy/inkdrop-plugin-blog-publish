{"version":3,"sources":["../src/publisher.js"],"names":["showdown","require","getWPAPIObj","endpoint","inkdrop","config","get","username","password","WPAPI","getGhostAPIObj","contentToken","adminToken","url","admin","GhostAdminAPI","key","version","client","GhostContentAPI","getPosts","blogType","api","posts","adminApi","browse","limit","formats","Error","findPost","metadata","title","Object","keys","length","console","log","findPostWithMetadata","findPostWithTitle","find","post","id","blogId","rendered","getPostHTML","content","html","getMetadataTag","tags","join","link","createNewPost","create","add","source","editPost","foundPost","update","edit","updated_at","publish","noteListBar","notes","store","getState","noteIds","actionTargetNoteIds","hashedItems","files","noteId","note","body","converter","Converter","value","entries","found","makeHtml","cm","getActiveEditor","doc","setValue","e","sync","md","makeMarkdown"],"mappings":"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","sourcesContent":["// inspiration\n// https://github.com/jmerle/inkdrop-export-as-gist/blob/master/src/exporter.js\n'use babel'\nimport GhostAdminAPI from '@tryghost/admin-api'\nimport GhostContentAPI from '@tryghost/content-api'\nimport WPAPI from 'wpapi'\nimport MetadataParser from 'markdown-yaml-metadata-parser'\nconst showdown = require('showdown')\n\nfunction getWPAPIObj() {\n  const endpoint = inkdrop.config.get('blog-publish.wordpressUrl')\n  const username = inkdrop.config.get('blog-publish.wordpressUsername')\n  const password = inkdrop.config.get('blog-publish.wordpressPassword')\n\n  return new WPAPI({\n    endpoint,\n    username,\n    password,\n  })\n}\n\nfunction getGhostAPIObj() {\n  const contentToken = inkdrop.config.get('blog-publish.ghostContentToken')\n  const adminToken = inkdrop.config.get('blog-publish.ghostAdminToken')\n  const url = inkdrop.config.get('blog-publish.ghostUrl')\n\n  // leaving the content API in here in case there is a need in the future\n  return {\n    admin: new GhostAdminAPI({\n      url,\n      key: adminToken,\n      version: 'v3',\n    }),\n    client: new GhostContentAPI({\n      url,\n      key: contentToken,\n      version: 'v3',\n    }),\n  }\n}\n\nfunction getPosts(blogType) {\n  if (blogType === 'WP') {\n    const api = getWPAPIObj()\n    return api.posts()\n  } else if (blogType === 'GHOST') {\n    const { admin: adminApi } = getGhostAPIObj()\n    return adminApi.posts.browse({ limit: 'all', formats: ['html'] })\n  }\n  throw new Error('Unsupported blog-type in getPosts')\n}\n\nfunction findPost({ blogType, posts, metadata, title }) {\n  if (metadata && Object.keys(metadata).length > 0) {\n    console.log('Finding by metadata')\n    return findPostWithMetadata({ blogType, metadata, posts })\n  } else if (title) {\n    console.log('Finding by title')\n    return findPostWithTitle({ blogType, posts, title })\n  }\n  throw new Error('Unsupported find post')\n}\n\nfunction findPostWithMetadata({ blogType, metadata, posts }) {\n  if (blogType === 'WP') {\n    return posts.find((post) => post.id === metadata.blogId)\n  } else if (blogType === 'GHOST') {\n    return posts.find((post) => post.id === metadata.blogId)\n  }\n\n  throw new Error('Unsupported blog-type in findPostWithTitle')\n}\nfunction findPostWithTitle({ blogType, posts, title }) {\n  if (blogType === 'WP') {\n    return posts.find((post) => post.title.rendered === title)\n  } else if (blogType === 'GHOST') {\n    return posts.find((post) => post.title === title)\n  }\n\n  throw new Error('Unsupported blog-type in findPostWithTitle')\n}\n\nfunction getPostHTML({ blogType, post }) {\n  if (blogType === 'WP') {\n    return post.content.rendered\n  } else if (blogType === 'GHOST') {\n    console.log({ post })\n    return post.html\n  }\n\n  throw new Error('Unsupported blog-type in getPostHTML')\n}\n\n// @TODO: maybe get some getTitle functions?  Maybe make a Post object to do this?\nfunction getMetadataTag({ post, blogType }) {\n  if (blogType === 'WP' || blogType === 'GHOST') {\n    return `---\ntitle: ${blogType === 'WP' ? post.title.rendered : post.title}\nkeywords: ${post.tags ? post.tags.join(',') : 'none'}\nblogType: ${blogType === 'WP' ? 'Wordpress' : 'Ghost'}\nblogId: ${post.id}\nlink: ${blogType === 'WP' ? post.link : post.url}\n---\n  `\n  }\n  throw new Error('Unsupported blog-type in getMetadataTag')\n}\n\nfunction createNewPost({ blogType, title, html }) {\n  if (blogType === 'WP') {\n    const api = getWPAPIObj()\n    return api.posts().create({ title, content: html })\n  } else if (blogType === 'GHOST') {\n    const { admin: adminApi } = getGhostAPIObj()\n    return adminApi.posts.add({ title, html }, { source: 'html' })\n  }\n\n  throw new Error('Unsupported blog-type in getPostHTML')\n}\n\nfunction editPost({ blogType, foundPost, html, title }) {\n  if (blogType === 'WP') {\n    const api = getWPAPIObj()\n    return api.posts().id(foundPost.id).update({ content: html })\n  } else if (blogType === 'GHOST') {\n    const { admin: adminApi } = getGhostAPIObj()\n    return adminApi.posts.edit(\n      { id: foundPost.id, title, html, updated_at: foundPost.updated_at },\n      { source: 'html' }\n    )\n  }\n\n  throw new Error('Unsupported blog-type in getPostHTML')\n}\n\nexport async function publish(blogType) {\n  const { noteListBar, notes } = inkdrop.store.getState()\n  const noteIds = noteListBar.actionTargetNoteIds\n\n  if (noteIds.length === 0 || Object.keys(notes.hashedItems).length === 0) {\n    throw new Error('No note(s) selected.')\n  }\n\n  const files = {}\n\n  for (const noteId of noteIds) {\n    const note = notes.hashedItems[noteId]\n    files[note.title] = { content: note.body }\n  }\n\n  try {\n    const { noteListBar, notes } = inkdrop.store.getState()\n    const noteIds = noteListBar.actionTargetNoteIds\n\n    if (noteIds.length === 0 || Object.keys(notes.hashedItems).length === 0) {\n      throw new Error('No note(s) selected.')\n    }\n\n    const files = {}\n\n    for (const noteId of noteIds) {\n      const note = notes.hashedItems[noteId]\n      files[note.title] = { content: note.body }\n    }\n\n    const posts = await getPosts(blogType)\n    const converter = new showdown.Converter()\n\n    for (const [key, value] of Object.entries(files)) {\n      const { metadata, content } = MetadataParser(value.content)\n      const found = findPost({ blogType, posts, title: key, metadata })\n      const html = converter.makeHtml(content)\n      console.log({ metadata, content })\n      const { cm } = inkdrop.getActiveEditor()\n      if (found) {\n        await editPost({ blogType, foundPost: found, html, title: key })\n        // if no metadata edit the post and put it in there!\n        if (metadata && Object.keys(metadata).length === 0) {\n          cm.doc.setValue(getMetadataTag({ post: found, blogType }) + value.content)\n        }\n      } else {\n        const post = await createNewPost({ blogType, title: key, html })\n\n        cm.doc.setValue(getMetadataTag({ post, blogType }) + value.content)\n      }\n    }\n  } catch (e) {\n    console.log('itz broken!', e)\n    throw e\n  }\n\n  return true\n}\n\nexport async function sync(blogType) {\n  const { noteListBar, notes } = inkdrop.store.getState()\n  const noteIds = noteListBar.actionTargetNoteIds\n\n  if (noteIds.length === 0 || Object.keys(notes.hashedItems).length === 0) {\n    throw new Error('No note(s) selected.')\n  }\n\n  const files = {}\n\n  for (const noteId of noteIds) {\n    const note = notes.hashedItems[noteId]\n    files[note.title] = { content: note.body }\n  }\n\n  try {\n    const { noteListBar, notes } = inkdrop.store.getState()\n    const { cm } = inkdrop.getActiveEditor()\n\n    const noteIds = noteListBar.actionTargetNoteIds\n\n    if (noteIds.length === 0 || Object.keys(notes.hashedItems).length === 0) {\n      throw new Error('No note(s) selected.')\n    }\n\n    const files = {}\n\n    for (const noteId of noteIds) {\n      const note = notes.hashedItems[noteId]\n      files[note.title] = { content: note.body }\n    }\n\n    const posts = await getPosts(blogType)\n\n    const converter = new showdown.Converter()\n\n    for (const [key, value] of Object.entries(files)) {\n      const { metadata } = MetadataParser(value.content)\n      const found = findPost({ blogType, posts, title: key, metadata })\n\n      if (found) {\n        const md = converter.makeMarkdown(getPostHTML({ blogType, post: found }))\n\n        cm.doc.setValue(getMetadataTag({ post: found, blogType }) + md)\n      }\n    }\n  } catch (e) {\n    console.log('itz broken!', e)\n    throw e\n  }\n\n  return true\n}\n"],"file":"publisher.js"}